name: CI Pipeline

on:
  push:
    branches:
      - feature/devsecops-movies-pipeline-rodrigoorellana

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: yarn install

      - name: Run build
        run: yarn build

  sast:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: yarn install

      - name: Validando existencia de proyecto en SonarCloud
        id: validateProjectOnSonar
        run: |
          set +e
          response=$(curl -s -o /dev/null -w "%{http_code}" -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' -d 'name=Laboratorio-final-new' -d 'project=Laboratorio-final-new' -d 'organization=devops-v7' -d 'visibility=public')
          if [ "$response" -eq 200 ]; then
            echo "Proyecto Laboratorio-final-new creado exitosamente en SonarCloud"
            curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' -d 'name=main' -d 'project=Laboratorio-final-new'
          elif [ "$response" -eq 400 ]; then
            echo "Proyecto ya existe en SonarCloud"
          else
            echo "Fallo la creacion del proyecto en SonarCloud, codigo de respuesta HTTP: $response"
            exit 1
          fi
          set -e

      - name: Install sonar-scanner
        run: yarn global add sonar-scanner

      - name: Build project
        run: yarn build

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=Laboratorio-final-new \
            -Dsonar.organization=devops-v7 \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.branch.name=${{ github.ref_name }}

      - name: Validate Quality Gate
        run: |
          echo "Obteniendo ID de an치lisis"
          idanalisis=$(curl -s -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/ce/component?component=Laboratorio-final-new')
          echo "Respuesta de ID de an치lisis: $idanalisis"
          idanalisisParse=$(echo "$idanalisis" | jq -r '.current.analysisId')

          if [ -z "$idanalisisParse" ]; then
            echo "No se pudo recuperar el ID de an치lisis"
            exit 1
          else
            echo "ID de an치lisis recuperado: $idanalisisParse"
          fi

          qualitygate=$(curl -s -u '${{ secrets.SONAR_TOKEN }}:' "https://sonarcloud.io/api/qualitygates/project_status?analysisId=${idanalisisParse}")
          echo "Respuesta de Quality Gate: $qualitygate"
          qualitygateStatus=$(echo "$qualitygate" | jq -r '.projectStatus.status')

          if [ "$qualitygateStatus" == "OK" ]; then
            echo "El proyecto pasa la puerta de calidad"
            exit 0
          else
            echo "El proyecto no pasa la puerta de calidad"
            exit 1
          fi

  SCA:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: yarn install

      - name: Run yarn audit
        run: |
          yarn audit --json > audit-report.json
        continue-on-error: true

      - name: Check for high severity vulnerabilities
        run: |
          cat audit-report.json | jq '. | select(.severity == "high")' > high-severity-vulnerabilities.json
          if [ -s high-severity-vulnerabilities.json]; then
            echo "High severity vulnerabilities found!"
            exit 1
          fi

      - name: Upload SCA report
        uses: actions/upload-artifact@master
        with:
          name: Yarn Audit report
          path: audit-report.json

  Dockerbuild:
    needs: SCA
    runs-on: self-hosted
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker Login
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Docker build
        run: | 
          docker build -t roderico/laboratorio-devsecops-final:latest .
          
      - name: Docker push
        run: | 
          docker push roderico/laboratorio-devsecops-final:latest

  DockerScan:
    needs: Dockerbuild
    runs-on: ubuntu-latest
    steps: 
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Pull de la imagen Docker
        run: |
          docker pull roderico/laboratorio-devsecops-final:latest

      - name: run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'roderico/laboratorio-devsecops-final:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: '5m'

  owasp_zap_baseline_scan:
    needs: DockerScan
    runs-on: self-hosted
    steps:
#      - name: Despliegue Aplicacion
#        run: |
#          docker run -d -p 8085:80 roderico/laboratorio-devsecops-final:latest
        
#      - name: Sleep
#        run: |
#          sleep 3

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:8085'
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: ghcr.io/zaproxy/zaproxy:stable
          issue_title: ZAP Scan Baseline Report
          fail_action: false
          allow_issue_writing: true
          artifact_name: zap_scan

      - name: Check for high or medium alerts
        run: |
          $HIGH_COUNT = (Get-Content report_json.json | Select-String -Pattern '"risk": "High"' | Measure-Object).Count
          $MEDIUM_COUNT = (Get-Content report_json.json | Select-String -Pattern '"risk": "Medium"' | Measure-Object).Count
          if ($HIGH_COUNT -ne 0 -or $MEDIUM_COUNT -ne 0) {
            Write-Output "High or medium risk alerts found!"
            exit 1
          } else {
            Write-Output "No high or medium risk alerts found."
          }
        shell: pwsh

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: DAST-Report
          path: DAST.html
